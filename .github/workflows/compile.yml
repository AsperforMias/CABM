name: Build Windows Executable with Nuitka

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release title (optional)'
        required: false

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: ⚙️ Install Visual Studio Build Tools
        shell: pwsh
        run: |
          # 安装 VS 2022 构建工具（包含 C++ 编译器）
          choco install visualstudio2022buildtools --no-progress --yes `
            --package-parameters="'--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended'"
          
          # 验证安装
          vswhere.exe -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64

      - name: 🧹 Read .nobuild file and clean excluded files
        shell: pwsh
        run: |
          # 读取.nobuild文件中的排除列表
          $excludedFiles = @(
            "docker-compose.dockerhub.yml",
            "docker-compose.yml",
            "Dockerfile",
            "package-lock.json",
            "package.json",
            "release.sh",
            "deploy.ps1",
            "deploy.sh",
            "deploy-docker.sh",
            "cabm-gui.ps1",
            "启动沙雕UI第二代.bat",
            ".gitignore",
            ".gitattributes",
            ".dockerignore"
          )
          
          # 添加.nobuild文件中指定的文件
          if (Test-Path ".nobuild") {
            $nobuildContent = Get-Content -Path ".nobuild" | Where-Object { $_ -notmatch '^\s*#' -and $_ -match '\S' }
            $excludedFiles += $nobuildContent
            Write-Output "Loaded $($nobuildContent.Count) exclusion rules from .nobuild"
          }
          
          # 删除指定文件
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
              Write-Output "Removed excluded file: $file"
            }
          }
          
          # 清理空目录
          Get-ChildItem -Directory | Where-Object { 
            (Get-ChildItem -Path $_.FullName -Recurse -File).Count -eq 0 
          } | Remove-Item -Recurse -Force

      - name: 📦 Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka

      - name: 🖥️ Build Windows executable with Nuitka
        shell: pwsh
        run: |
          # 设置 MSVC 环境（Nuitka 需要）
          $vsPath = vswhere.exe -latest -property installationPath
          $vcVarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          cmd.exe /c "`"$vcVarsPath`" amd64 && set" | ForEach-Object {
              if ($_ -match "(\w+)=(.*)") {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
          }
          
          # 构建 EXE (使用cmd.exe执行，避免PowerShell解析问题)
          cmd.exe /c "python -m nuitka --standalone --mingw64 --enable-plugin=multiprocessing --enable-plugin=numpy --enable-plugin=pylint-warnings --include-package=services --include-package=utils --include-package=utils.RAG --include-package=utils.RAG.Multi_Recall --include-package=utils.RAG.Reranker --windows-disable-console=off --output-dir=dist start.py"

          # 保留 characters 目录（DLC 插件）
          if (Test-Path "characters") {
            Copy-Item -Path "characters" -Destination "dist\start.dist\characters" -Recurse -Force
          }
          
          # 复制静态资源和模板
          if (Test-Path "static") {
            Copy-Item -Path "static" -Destination "dist\start.dist\static" -Recurse -Force
          }
          if (Test-Path "templates") {
            Copy-Item -Path "templates" -Destination "dist\start.dist\templates" -Recurse -Force
          }
          if (Test-Path "config") {
            Copy-Item -Path "config" -Destination "dist\start.dist\config" -Recurse -Force
          }
          
          # 重命名 dist 目录为 app
          Move-Item -Path "dist\start.dist" -Destination "app" -Force

      - name: 🗑️ Cleanup build artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "dist", "start.build" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package release (copy to root and compress)
        shell: pwsh
        run: |
          # 将 app 目录内容复制到根目录
          Get-ChildItem -Path "app" | ForEach-Object {
            Move-Item -Path $_.FullName -Destination "." -Force
          }
          
          # 删除空的 app 目录
          Remove-Item -Path "app" -Recurse -Force
          
          # 重命名 start.exe 为 app.exe
          if (Test-Path "start.exe") {
            Move-Item -Path "start.exe" -Destination "app.exe" -Force
          }
          
          # 压缩整个目录
          Compress-Archive -Path * -DestinationPath "Windows-Release-${{ inputs.version }}.zip" -Force

      - name: 🚀 Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ inputs.version }}" `
            --title "${{ inputs.release_name || inputs.version }}" `
            --notes "Windows release built with Nuitka (standalone mode, with console)" `
            "Windows-Release-${{ inputs.version }}.zip"