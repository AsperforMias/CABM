name: Build Secure Windows Executable

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release title (optional)'
        required: false

permissions:
  contents: write

jobs:
  build-secure-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: 🧹 Clean excluded files
        shell: pwsh
        run: |
          $excludedFiles = @(
            "docker-compose.dockerhub.yml",
            "docker-compose.yml",
            "Dockerfile",
            "package-lock.json",
            "package.json",
            "release.sh",
            "requirements.txt",
            "deploy.ps1",
            "deploy.sh",
            "deploy-docker.sh",
            "cabm-gui.ps1",
            "启动沙雕UI第二代.bat",
            ".gitignore",
            ".gitattributes",
            ".dockerignore"
          )
          
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
            }
          }

      - name: 🔒 Create secure compile script
        shell: pwsh
        run: |
          # 安全创建编译脚本（避免YAML解析问题）
          $compileScript = @"
          # Compile .py files to .pyd (except start.py and __init__.py)
          import os
          import subprocess
          import sys
          from pathlib import Path
          
          def compile_to_pyd(file_path):
              file_path = Path(file_path)
              if file_path.name == 'start.py' or file_path.name == '__init__.py':
                  return  # Skip entry point and init files
                  
              print(f""Compiling {file_path} to .pyd..."")
              
              # Generate C code from Python
              subprocess.run([
                  'python', '-m', 'cython', 
                  '--embed', 
                  '--cplus',
                  '-3',
                  str(file_path)
              ], check=True)
              
              # Compile C to .pyd
              c_file = file_path.with_suffix('.c')
              pyd_file = file_path.with_suffix('.pyd')
              
              # Get Python include paths
              include_path = sys.prefix + '\\\\include'
              numpy_path = sys.prefix + '\\\\Lib\\\\site-packages\\\\numpy\\\\core\\\\include'
              lib_path = sys.prefix + '\\\\libs'
              
              # Compile with MSVC
              subprocess.run([
                  'cl', '/LD', 
                  f""/I{include_path}"",
                  f""/I{numpy_path}"",
                  '/link', f""/LIBPATH:{lib_path}"",
                  str(c_file),
                  f""/out:{pyd_file}""
              ], shell=True, check=True)
              
              # Clean up intermediate files
              if c_file.exists():
                  c_file.unlink()
          
          # Process all .py files
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.py') and not file.startswith('.'):
                      compile_to_pyd(os.path.join(root, file))
          "@
          
          # 写入文件（使用单引号避免YAML解析）
          $compileScript | Out-File -FilePath "compile_to_pyd.py" -Encoding UTF8

      - name: 🔒 Compile .py to .pyd
        shell: pwsh
        run: |
          # 安装编译工具
          pip install cython nuitka wheel setuptools
          
          # 运行编译脚本
          python compile_to_pyd.py
          
          # 删除原始 .py 文件（保留 start.py 和 __init__.py）
          Get-ChildItem -Path . -Include *.py -Recurse | 
            Where-Object { $_.Name -notin @('start.py', '__init__.py') } |
            Remove-Item -Force

      - name: 📦 Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          # 构建 EXE
          pyinstaller `
            --onefile `
            --windowed `
            --name "app" `
            --add-data "static;static" `
            --add-data "templates;templates" `
            --paths "." `
            start.py

          # 移动 EXE 到根目录
          Move-Item -Path "dist\\app.exe" -Destination "." -Force

      - name: 🗑️ Cleanup build artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "build", "dist", "*.c", "*.o", "compile_to_pyd.py" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package release
        shell: pwsh
        run: |
          Compress-Archive -Path * -DestinationPath "Secure-Windows-Release-${{ inputs.version }}.zip" -Force

      - name: 🚀 Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ inputs.version }}" `
            --title "${{ inputs.release_name || inputs.version }}" `
            --notes "Secure Windows release with .py files compiled to .pyd" `
            "Secure-Windows-Release-${{ inputs.version }}.zip"