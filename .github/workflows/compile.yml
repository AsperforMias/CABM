name: Build Secure Windows Executable

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release title (optional)'
        required: false

permissions:
  contents: write

jobs:
  build-secure-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: ⚙️ Install Visual Studio Build Tools
        shell: pwsh
        run: |
          # 安装 VS 2022 构建工具（包含 C++ 编译器）
          choco install visualstudio2022buildtools --no-progress --yes `
            --package-parameters="'--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended'"
          
          # 验证安装
          vswhere.exe -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64

      - name: 🧹 Clean excluded files
        shell: pwsh
        run: |
          $excludedFiles = @(
            "docker-compose.dockerhub.yml",
            "docker-compose.yml",
            "Dockerfile",
            "package-lock.json",
            "package.json",
            "release.sh",
            "requirements.txt",
            "deploy.ps1",
            "deploy.sh",
            "deploy-docker.sh",
            "cabm-gui.ps1",
            "启动沙雕UI第二代.bat",
            ".gitignore",
            ".gitattributes",
            ".dockerignore"
          )
          
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
            }
          }

      - name: 🔒 Setup MSVC environment for Cython
        shell: pwsh
        run: |
          # 必须在安装 Cython 前设置环境！
          $vsPath = vswhere.exe -latest -property installationPath
          $vcVarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          cmd.exe /c "`"$vcVarsPath`" amd64 && set" | ForEach-Object {
              if ($_ -match "(\w+)=(.*)") {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
          }
          
          # 验证 cl.exe 可用
          cl.exe /?

      - name: 🔒 Install cython with C++ compiler
        shell: pwsh
        run: |
          pip install cython wheel setuptools

      - name: 🔒 Compile .py to .pyd
        shell: pwsh
        run: |
          # 创建编译脚本（简化版，避免复杂路径）
          $compileScript = @'
          import os
          import subprocess
          import sys
          from pathlib import Path
          
          def compile_to_pyd(file_path):
              file_path = Path(file_path)
              if file_path.name == 'start.py' or file_path.name == '__init__.py':
                  return
                  
              print(f'Compiling {file_path} to .pyd...')
              
              # 1. 生成C代码（关键：需要MSVC环境）
              subprocess.run([
                  'python', '-m', 'cython', 
                  '--embed', 
                  '--cplus',
                  '-3',
                  str(file_path)
              ], check=True)
              
              # 2. 验证.c文件存在
              c_file = file_path.with_suffix('.c')
              if not c_file.exists():
                  raise FileNotFoundError(f"Missing {c_file}")
              
              # 3. 编译.c到.pyd
              pyd_file = file_path.with_suffix('.pyd')
              subprocess.run([
                  'cl', '/LD', 
                  '/I%PYTHONHOME%\\include',
                  '/I%PYTHONHOME%\\Lib\\site-packages\\numpy\\core\\include',
                  '/link', '/LIBPATH:%PYTHONHOME%\\libs',
                  str(c_file),
                  f'/out:{pyd_file}'
              ], check=True, shell=True)
              
              # 4. 清理
              c_file.unlink()
          
          # 处理所有.py文件
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.py') and not file.startswith('.'):
                      compile_to_pyd(os.path.join(root, file))
          '@
          
          $compileScript | Out-File -FilePath "compile_to_pyd.py" -Encoding UTF8
          
          # 运行编译
          python compile_to_pyd.py
          
          # 删除原始.py文件
          Get-ChildItem -Path . -Include *.py -Recurse | 
            Where-Object { $_.Name -notin @('start.py', '__init__.py') } |
            Remove-Item -Force

      - name: 📦 Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          # 设置MSVC环境（PyInstaller需要）
          $vsPath = vswhere.exe -latest -property installationPath
          $vcVarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          cmd.exe /c "`"$vcVarsPath`" amd64 && set" | ForEach-Object {
              if ($_ -match "(\w+)=(.*)") {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
          }
          
          # 构建EXE
          pyinstaller `
            --onefile `
            --windowed `
            --name "app" `
            --add-data "static;static" `
            --add-data "templates;templates" `
            --paths "." `
            start.py

          # 移动EXE到根目录
          Move-Item -Path "dist\\app.exe" -Destination "." -Force

      - name: 🗑️ Cleanup build artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "build", "dist", "*.c", "*.o", "compile_to_pyd.py" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package release
        shell: pwsh
        run: |
          Compress-Archive -Path * -DestinationPath "Secure-Windows-Release-${{ inputs.version }}.zip" -Force

      - name: 🚀 Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ inputs.version }}" `
            --title "${{ inputs.release_name || inputs.version }}" `
            --notes "Secure Windows release with .py files compiled to .pyd" `
            "Secure-Windows-Release-${{ inputs.version }}.zip"