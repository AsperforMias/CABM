name: Build Secure Windows Executable

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_name:
        description: 'Release title (optional)'
        required: false

permissions:
  contents: write

jobs:
  build-secure-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: ⚙️ Install Visual Studio Build Tools
        shell: pwsh
        run: |
          # 安装 VS 2022 构建工具（包含 C++ 编译器）
          choco install visualstudio2022buildtools --no-progress --yes `
            --package-parameters="'--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended'"
          
          # 验证安装
          vswhere.exe -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64

      - name: 🧹 Clean excluded files
        shell: pwsh
        run: |
          $excludedFiles = @(
            "docker-compose.dockerhub.yml",
            "docker-compose.yml",
            "Dockerfile",
            "package-lock.json",
            "package.json",
            "release.sh",
            "requirements.txt",
            "deploy.ps1",
            "deploy.sh",
            "deploy-docker.sh",
            "cabm-gui.ps1",
            "启动沙雕UI第二代.bat",
            ".gitignore",
            ".gitattributes",
            ".dockerignore"
          )
          
          foreach ($file in $excludedFiles) {
            if (Test-Path $file) {
              Remove-Item -Path $file -Force
            }
          }

      - name: 🔧 Create distutils.cfg for Cython (FIXED)
        shell: pwsh
        run: |
          # 正确获取Python安装路径
          $pythonHome = (python -c "import sys; print(sys.prefix)").Trim()
          $distutilsPath = Join-Path $pythonHome "Lib\distutils"
          
          # 确保目录存在
          if (-not (Test-Path $distutilsPath)) {
              New-Item -ItemType Directory -Path $distutilsPath -Force
          }
          
          # 创建distutils配置
          $distutilsCfg = @"
          [build]
          compiler = msvc
          
          [build_ext]
          compiler = msvc
          "@
          
          $distutilsCfg | Out-File -FilePath (Join-Path $distutilsPath "distutils.cfg") -Encoding UTF8
          
          # 验证文件创建
          Write-Output "Created distutils.cfg at $(Join-Path $distutilsPath "distutils.cfg")"
          Get-Content (Join-Path $distutilsPath "distutils.cfg")

      - name: 🔒 Setup MSVC environment for Cython
        shell: pwsh
        run: |
          # 设置 MSVC 环境变量
          $vsPath = vswhere.exe -latest -property installationPath
          $vcVarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          cmd.exe /c "`"$vcVarsPath`" amd64 && set" | ForEach-Object {
              if ($_ -match "(\w+)=(.*)") {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
          }
          
          # 验证 cl.exe 可用
          cl.exe /?

      - name: 🔒 Install cython with C++ compiler
        shell: pwsh
        run: |
          pip install cython wheel setuptools

      - name: 🔒 Compile .py to .pyd
        shell: pwsh
        run: |
          # 创建更健壮的编译脚本（捕获详细错误）
          $compileScript = @'
          import os
          import subprocess
          import sys
          import re
          from pathlib import Path
          
          # 修复Windows路径问题
          def fix_windows_path(path):
              return str(path).replace("\\\\", "\\")
          
          def compile_to_pyd(file_path):
              file_path = Path(file_path)
              # 排除特殊文件
              if (file_path.name in ['start.py', '__init__.py', 'compile_to_pyd.py'] or
                  'site-packages' in str(file_path) or
                  '__pycache__' in str(file_path) or
                  file_path.name.endswith('.spec') or
                  file_path.name.endswith('.c') or
                  file_path.name.endswith('.pyd')):
                  print(f"Skipping {file_path} (entry point or special file)")
                  return
                  
              print(f"Compiling {file_path} to .pyd...")
              
              # 1. 生成C代码（捕获详细错误）
              try:
                  # 使用绝对路径避免Windows路径问题
                  abs_path = os.path.abspath(file_path)
                  result = subprocess.run([
                      'python', '-m', 'cython', 
                      '--embed', 
                      '--cplus',
                      '-3',
                      abs_path
                  ], capture_output=True, text=True, check=True)
                  
                  # 显示Cython输出
                  if result.stdout:
                      print(f"Cython output: {result.stdout}")
                  if result.stderr:
                      print(f"Cython warnings: {result.stderr}")
              except subprocess.CalledProcessError as e:
                  print(f"ERROR: Cython failed for {file_path}")
                  print(f"Command: {e.cmd}")
                  print(f"Return code: {e.returncode}")
                  print(f"Stdout: {e.stdout}")
                  print(f"Stderr: {e.stderr}")
                  
                  # 检查是否是语法错误
                  if "SyntaxError" in e.stderr or "SyntaxError" in e.stdout:
                      print("This is likely a Python syntax error in your code. Check your code for compatibility with Cython.")
                  # 检查是否找不到编译器
                  elif "Unable to find vcvarsall.bat" in e.stderr or "No compiler" in e.stderr:
                      print("Cython cannot find the C++ compiler. Ensure MSVC environment is properly set up.")
                  # 检查是否路径问题
                  elif "No such file or directory" in e.stderr:
                      print("File path issue. Check if the file exists and path is correct.")
                  raise
              
              # 2. 验证.c文件存在
              c_file = file_path.with_suffix('.c')
              if not c_file.exists():
                  raise FileNotFoundError(f"Missing {c_file} after Cython processing")
              
              # 3. 编译.c到.pyd
              pyd_file = file_path.with_suffix('.pyd')
              print(f"Compiling {c_file} to {pyd_file}...")
              try:
                  # 使用绝对路径
                  abs_c_file = os.path.abspath(c_file)
                  abs_pyd_file = os.path.abspath(pyd_file)
                  
                  subprocess.run([
                      'cl', '/LD', 
                      '/I%PYTHONHOME%\\include',
                      '/I%PYTHONHOME%\\Lib\\site-packages\\numpy\\core\\include',
                      '/link', '/LIBPATH:%PYTHONHOME%\\libs',
                      abs_c_file,
                      f'/out:{abs_pyd_file}'
                  ], shell=True, check=True)
              except subprocess.CalledProcessError as e:
                  print(f"ERROR: MSVC failed for {file_path}")
                  print(f"Command: {e.cmd}")
                  print(f"Return code: {e.returncode}")
                  print(f"Stdout: {e.stdout}")
                  print(f"Stderr: {e.stderr}")
                  raise
              
              # 4. 清理
              try:
                  os.remove(c_file)
                  print(f"Successfully compiled {file_path} to {pyd_file}")
              except Exception as e:
                  print(f"Warning: Could not remove {c_file}: {str(e)}")
          
          # 处理所有.py文件
          pyd_count = 0
          for root, _, files in os.walk('.'):
              for file in files:
                  if file.endswith('.py') and not file.startswith('.'):
                      try:
                          compile_to_pyd(os.path.join(root, file))
                          pyd_count += 1
                      except Exception as e:
                          print(f"Failed to compile {os.path.join(root, file)}: {str(e)}")
          
          # 确认至少有一个.pyd文件被创建
          if pyd_count == 0:
              raise RuntimeError("No .pyd files were created. Compilation failed for all files.")
          print(f"Successfully created {pyd_count} .pyd files")
          '@
          
          $compileScript | Out-File -FilePath "compile_to_pyd.py" -Encoding UTF8
          
          # 运行编译（显示详细输出）
          python compile_to_pyd.py
          
          # 删除原始.py文件（保留 start.py 和 __init__.py）
          Get-ChildItem -Path . -Include *.py -Recurse | 
            Where-Object { $_.Name -notin @('start.py', '__init__.py', 'compile_to_pyd.py') } |
            Remove-Item -Force

      - name: 📦 Install dependencies
        shell: pwsh
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🖥️ Build Windows executable
        shell: pwsh
        run: |
          # 设置 MSVC 环境（PyInstaller 需要）
          $vsPath = vswhere.exe -latest -property installationPath
          $vcVarsPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          cmd.exe /c "`"$vcVarsPath`" amd64 && set" | ForEach-Object {
              if ($_ -match "(\w+)=(.*)") {
                  [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
          }
          
          # 构建 EXE
          pyinstaller `
            --onefile `
            --windowed `
            --name "app" `
            --add-data "static;static" `
            --add-data "templates;templates" `
            --paths "." `
            start.py

          # 移动 EXE 到根目录
          Move-Item -Path "dist\\app.exe" -Destination "." -Force

      - name: 🗑️ Cleanup build artifacts
        shell: pwsh
        run: |
          Remove-Item -Path "build", "dist", "*.c", "*.o", "compile_to_pyd.py" -Recurse -Force -ErrorAction Ignore
          Remove-Item -Path "*.spec" -Force -ErrorAction Ignore

      - name: 📦 Package release
        shell: pwsh
        run: |
          Compress-Archive -Path * -DestinationPath "Secure-Windows-Release-${{ inputs.version }}.zip" -Force

      - name: 🚀 Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ inputs.version }}" `
            --title "${{ inputs.release_name || inputs.version }}" `
            --notes "Secure Windows release with .py files compiled to .pyd" `
            "Secure-Windows-Release-${{ inputs.version }}.zip"