name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: '镜像版本'
        required: false
        default: 'latest'
        type: string
      registry:
        description: '目标注册表'
        required: false
        default: 'docker.io'
        type: choice
        options:
          - docker.io
          - ghcr.io
      platforms:
        description: '构建平台'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string
      push_to_registry:
        description: '是否推送到镜像仓库'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Make release script executable
      run: chmod +x release.sh

    - name: Build and push with release script (manual trigger)
      if: github.event_name == 'workflow_dispatch'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ github.event.inputs.registry }}" = "docker.io" ]; then
          if [ "${{ github.event.inputs.push_to_registry }}" = "true" ]; then
            ./release.sh -v "${{ github.event.inputs.version }}" -r "${{ github.event.inputs.registry }}" -p "${{ github.event.inputs.platforms }}" --push
          else
            ./release.sh -v "${{ github.event.inputs.version }}" -r "${{ github.event.inputs.registry }}" -p "${{ github.event.inputs.platforms }}"
          fi
        else
          # 对于 ghcr.io，回退到原有方法
          echo "使用 GitHub Container Registry，回退到原有构建方法"
        fi

    - name: Log in to Container Registry (for automatic triggers)
      if: github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (for automatic triggers)
      if: github.event_name != 'workflow_dispatch'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image (for automatic triggers)
      if: github.event_name != 'workflow_dispatch'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment package
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_to_registry == 'true')
      run: |
        # 创建部署包目录
        mkdir -p deployment-package
        
        # 复制部署文件
        cp docker-compose.yml deployment-package/ 2>/dev/null || echo "docker-compose.yml not found, skipping"
        cp .env.docker deployment-package/.env.example 2>/dev/null || echo ".env.docker not found, skipping"
        cp docker-start.sh deployment-package/ 2>/dev/null || echo "docker-start.sh not found, skipping"
        cp deploy.sh deployment-package/ 2>/dev/null || echo "deploy.sh not found, skipping"
        cp release.sh deployment-package/ 2>/dev/null || echo "release.sh not found, skipping"
        
        # 创建部署说明
        cat > deployment-package/README.md << 'EOF'
        # CABM Docker 部署包
        
        ## 快速部署
        
        ### 方式一：使用预构建镜像
        
        1. 复制 `.env.example` 为 `.env.docker` 并填写API密钥
        2. 运行部署脚本：`./deploy.sh`
        
        ### 方式二：使用 Docker Hub 镜像
        
        修改 `docker-compose.yml` 中的镜像地址为：
        ```yaml
        image: your-dockerhub-username/cabm:latest
        ```
        
        ### 方式三：使用 GitHub Container Registry
        
        修改 `docker-compose.yml` 中的镜像地址为：
        ```yaml
        image: ghcr.io/${{ github.repository }}:latest
        ```
        
        然后运行：
        ```bash
        ./docker-start.sh start
        ```
        
        ## 自定义构建
        
        使用 release.sh 脚本进行自定义构建：
        ```bash
        # 构建并推送到 Docker Hub
        ./release.sh -v 1.0.0 --push
        
        # 只构建不推送
        ./release.sh -v 1.0.0
        
        # 指定平台构建
        ./release.sh -v 1.0.0 -p linux/amd64 --push
        ```
        EOF
        
        # 打包
        tar -czf cabm-deployment-${{ github.sha }}.tar.gz deployment-package/

    - name: Upload deployment package
      if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_to_registry == 'true')
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: cabm-deployment-${{ github.sha }}.tar.gz
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push_to_registry == 'true')
    
    steps:
    - name: Determine image reference
      id: image-ref
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.registry }}" = "docker.io" ]; then
          # 对于手动触发的 Docker Hub 推送，需要从 secrets 获取用户名
          echo "image-ref=${{ secrets.DOCKER_USERNAME }}/cabm:${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # 对于自动触发或 GitHub Container Registry
          echo "image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image-ref.outputs.image-ref }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
